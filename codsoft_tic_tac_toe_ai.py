# -*- coding: utf-8 -*-
"""CodSoft_TIC-TAC-TOE_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/118fG3YbEwnmX69yK63f2xAqcEW52nKFI

#**TIC-TAC-TOE AI**
"""

import random

"""Function to print the Tic-Tac-Toe board"""

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("---------")

"""Function to check if a player has won"""

def is_winner(board, player):

    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2-i] == player for i in range(3)):
        return True
    return False

"""Function to check if the board is full (tie)"""

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

"""Function to get a list of empty cells on the board"""

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

"""Minimax algorithm with Alpha-Beta pruning"""

def minimax(board, depth, is_maximizing, alpha, beta):
    if is_winner(board, "O"):
        return 1
    if is_winner(board, "X"):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = float("-inf")
        for i, j in get_empty_cells(board):
            board[i][j] = "O"
            score = minimax(board, depth + 1, False, alpha, beta)
            board[i][j] = " "
            best_score = max(score, best_score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = float("inf")
        for i, j in get_empty_cells(board):
            board[i][j] = "X"
            score = minimax(board, depth + 1, True, alpha, beta)
            board[i][j] = " "
            best_score = min(score, best_score)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return best_score

"""Function to get the best move for the AI using Minimax"""

def get_best_move(board):
    best_score = float("-inf")
    best_move = None
    for i, j in get_empty_cells(board):
        board[i][j] = "O"
        score = minimax(board, 0, False, float("-inf"), float("inf"))
        board[i][j] = " "
        if score > best_score:
            best_score = score
            best_move = (i, j)
    return best_move

"""Function to play the game"""

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("You are X, and the AI is O.")
    print_board(board)

    while True:

        # Human player's turn
        while True:
            try:
                row, col = map(int, input("Enter your move (row and column, 0-2): ").split())
                if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == " ":
                    break
                else:
                    print("Invalid move. Try again.")
            except ValueError:
                print("Invalid input. Please enter two numbers separated by a space.")

        board[row][col] = "X"
        print_board(board)

        if is_winner(board, "X"):
            print("You win! Congratulations!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

        # AI player's turn
        print("AI is making a move...")
        ai_row, ai_col = get_best_move(board)
        board[ai_row][ai_col] = "O"
        print_board(board)

        if is_winner(board, "O"):
            print("AI wins! Better luck next time.")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

if __name__ == "__main__":
    play_game()