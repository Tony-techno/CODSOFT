# -*- coding: utf-8 -*-
"""CodSoft_CHATBOT_WITH_RULE-BASED_RESPONSES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rW1F9AjumqaH85qogxFfrM1IewAJRGKy

#**CHATBOT WITH RULE-BASED RESPONSES**

1. Imports:

- re: For regular expression operations.
- datetime: To get the current time and date.
"""

import re
from datetime import datetime

"""2. Chatbot Class:

- __init__: Initializes the context dictionary.
- set_context: Stores key-value pairs in the context.
- get_context: Retrieves values from the context.
- clear_context: Clears the context dictionary.
- chatbot_response: Handles user input and returns appropriate responses based on predefined rules using regular expressions.
- run: Manages the conversation flow, getting input from the user and displaying the chatbot's responses.
"""

class Chatbot:
    def __init__(self):

        # Initialize an empty context dictionary to store user-specific information.
        self.context = {}

    def set_context(self, key, value):

        # Set a value in the context dictionary for a given key.
        self.context[key] = value

    def get_context(self, key):

        # Retrieve a value from the context dictionary for a given key.
        return self.context.get(key, None)

    def clear_context(self):

        # Clear all values in the context dictionary.
        self.context = {}

    def chatbot_response(self, user_input):

        # Convert user input to lowercase for uniformity in pattern matching.
        user_input = user_input.lower()

        # Check if the user input is a greeting.
        if re.search(r'\b(hello|hi|hey)\b', user_input):
            return "Hello! How can I assist you today?"

        # Check if the user is asking about the chatbot's well-being.
        elif re.search(r'\bhow are you\b', user_input):
            return "I'm just a chatbot, but I'm here to help you!"

        # Check if the user is asking for the chatbot's name.
        elif re.search(r'\bwhat is your name\b', user_input):
            return "I'm your friendly chatbot!"

        # Check if the user is saying goodbye.
        elif re.search(r'\b(bye|goodbye)\b', user_input):
            return "Goodbye! Have a great day!"

        # Check if the user is providing their name.
        elif re.search(r'\bmy name is (\w+)\b', user_input):

            # Extract the user's name from the input using a regular expression group.
            name = re.search(r'\bmy name is (\w+)\b', user_input).group(1)

            # Store the user's name in the context.
            self.set_context('user_name', name)
            return f"Nice to meet you, {name}!"

        # Check if the user is asking for the current time.
        elif re.search(r'\bwhat time is it\b', user_input):

            # Get the current time in hours and minutes.
            now = datetime.now().strftime('%H:%M')
            return f"The current time is {now}."

        # Check if the user is asking for today's date.
        elif re.search(r'\bwhat is the date\b|\bwhats the date\b', user_input):

            # Get today's date in the format YYYY-MM-DD.
            today = datetime.now().strftime('%Y-%m-%d')
            return f"Today's date is {today}."

        # Check if the user is asking who they are (based on previously provided name).
        elif re.search(r'\bwho am i\b', user_input):

            # Retrieve the user's name from the context.
            name = self.get_context('user_name')

            if name:
                return f"You are {name}!"
            else:
                return "I don't know your name yet. What's your name?"

        # Check if the user wants to reset the context.
        elif re.search(r'\breset\b', user_input):

            # Clear the context dictionary.
            self.clear_context()
            return "Context reset. How can I assist you now?"

        # Default response for unrecognized inputs.
        else:
            return "I'm sorry, I don't understand that. Can you please rephrase?"

    def run(self):

        # Initial greeting when the chatbot starts.
        print('*'*70)
        print("Chatbot: Hello! How can I assist you today?")
        print('*'*70)
        while True:

            # Get input from the user.
            user_input = input("You: ")

            # If the user says goodbye, end the conversation.
            if re.search(r'\b(bye|goodbye)\b', user_input.lower()):
                print("Chatbot: Goodbye! Have a great day!")
                break

            # Get the chatbot's response to the user input.
            response = self.chatbot_response(user_input)

            # Print the chatbot's response.
            print("Chatbot:", response)
            print('*'*70)

"""3. Response Handling:

- Uses regular expressions to identify common queries and respond accordingly.
- Stores user-specific information (like the name) in the context.
- Provides current time and date.
- Can reset the context to clear stored information.

4. Create an instance of the Chatbot class and start the chatbot.
"""

chatbot = Chatbot()
chatbot.run()